snippet     struct
options     word
    struct ${1:name} {
        var ${0:TARGET}
    }

snippet     class
options     word
    class ${1:name} {
        ${0:TARGET}
    }

snippet     enum
options     word
    enum ${1:name} {
        case ${0:TARGET}
    }

snippet     case
options     head
    case ${1:pattern}${0}

snippet     protocol
options     word
    protocol ${1:name} {
        ${0:TARGET}
    }

snippet     var
options     word
    var ${1:name}: ${2:Int}${0}

snippet     let
options     word
    let ${1:name}: ${2:Int}${0}

snippet     extension
    extension ${1:Int} {
        ${0:TARGET}
    }

snippet     func
abbr        func name(...) -> Type { ... }
options     word
    func ${1:name}(${2:#:arguments}) -> ${3:Int}${0} {
    }

snippet     void
abbr        func name(...) { ... }
options     word
    func ${1:name}(${2:#:arguments})${0}

snippet     for
options     head
    for var ${1:i = 0}; ${2:i < j}; ${3:i++} {
        ${0:TARGET}
    }

snippet     iter
options     head
    for ${1:item} in ${2:collection} {
        ${0:TARGET}
    }

snippet     while
options     head
    while ${1:false} {
        ${0:TARGET}
    }

snippet     repeat
options     head
    repeat {
        ${0:TARGET}
    } while ${1:false}

snippet     if
options     word
    if ${1:false} {
        ${0:TARGET}
    }${9}

snippet     elif
options     word
    else if ${1:false} {
        ${0:TARGET}
    }${9}

snippet     else
options     word
    else {
        ${0:TARGET}
    }${9}

snippet     optional
abbr        if let/case ... { ... }
options     head
    if ${1:let} ${2:name} = ${3:expression} else {
        ${0:TARGET}
    }${9}

snippet     guard
abbr        guard let ... else { ... }
options     head
    guard let ${1} = ${2} else {
        ${0:TARGET}
    }
    ${9}

snippet     switch
options     head
    switch ${1:expression} {
        ${0:TARGET}
    }

snippet     do
options     head
    do {
        ${0:TARGET}
    }${9}

snippet     catch
options     word
    catch${1:#:pattern} {
        ${0:TARGET}
    }${9}

snippet     defer
options     head
    defer {
        ${0:TARGET}
    }

snippet     import
    import ${1:module}
    ${0}

snippet     subscript
options     word
    subscript(${1:index: Int}) -> ${2:Int} {
        ${0:TARGET}
    }
    ${9}

snippet     init
options     word
    init${1:#:?}(${2:#:arguments}) {
        ${0:TARGET}
    }
    ${9}

snippet     deinit
options     head
    deinit {
        ${0:TARGET}
    }

snippet     closure
options     word
abbr        { (...) -> Type in ... }
    { ${1:#capture}(${2:#:arguments}) -> ${3:Void} in
        ${0:TARGET}
    }

snippet     sp_begin
options     word
abbr        os_signpost( ... )
    if #available(iOS 12.0, *) {
        os_signpost(
            type: .${0:begin},
            log: log,
            name: "${1:name}",
            signpostID: signpostID,
            "%{public}s",
            "\(${2:identifier})"
        )
    }

snippet     sp_import
options     word
abbr        import os.signpost ... let log
  import os.signpost

  let log = OSLog(subsystem: "com.logging.aircam", category: "AirCam")
  @available(iOS 12.0, *)
  let signpostID = OSSignpostID(log: log)

snippet     w_self
options     word
abbr        [weak self]
  [weak self]

snippet     s_self
options     word
abbr        { (...) -> Type in ... }
  guard let strongSelf = self else { return }

snippet d_log
options word
abbr print(file:line)
  print("DEBUG: \(#file as String):\(#line)")

snippet collectionviewdatasource
options word
abbr collection view data source methods
  func numberOfSections(in collectionView: UICollectionView) -> Int {
    return <#count#>
  }

  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return <#count#>
  }

  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    <#code#>
  }

snippet uiview
options word
abbr class .. : UIView
  class ${1:NAME}: UIView {
    override public init(frame: CGRect) {
        super.init(frame: frame)
        loadUI()
    }

    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        loadUI()
    }

    func loadUI() {
        backgroundColor = UIColor.clear
    }
  }
